// deletion of doubly linked list illustration
#include "structNode.hpp"
int main(){
    Dnode* head = new Dnode({"head_node", NULL, NULL});
    Dnode* temp = new Dnode({"new_head", NULL, NULL});
    Dnode* temp2 = new Dnode({"third_head", NULL, NULL});
    Dnode* temp4 = new Dnode({"fifth_node", NULL, NULL});
    Dnode* temp3 = new Dnode({"fourth_node", NULL, temp4});
    Dnode* empty = NULL;
    // description
    cout << " deletion of doubly linked list:\n";
    cout << " deletion done on the index position\n";
    cout << " if list will be empty after deletion, head is made to point to NULL\n";
    cout << " ========================================\n";
    cout << " head:\n";
    Display(head);
    cout << " ========================================\n";
    cout << " temp:\n";
    Display(temp);
    cout << " ========================================\n";
    cout << " temp2:\n";
    Display(temp2);
    cout << " ========================================\n";
    cout << " temp3:\n";
    Display(temp3);
    cout << " ========================================\n";
    cout << " temp4:\n";
    Display(temp4);
    cout << " ========================================\n";
    cout << " empty:\n";
    Display(empty);
    insertDnode(empty, head);
    insertDnode(empty, temp);
    insertDnode(empty, temp2, 1);
    insertDnode(empty, temp3, 3);
    insertDnode(empty, temp4, 3);
    cout << " after all insertions:\n";
    cout << " 1. head on empty (empty node)\n";
    cout << " 2. temp on head of empty (one node)\n";
    cout << " 3. temp2 on 1th node of empty (two nodes)\n";
    cout << " 4. temp3 on tail of empty (three nodes)\n";
    cout << " 5. temp4 on 3th node of empty (four nodes)\n";
    cout << " ========================================\n";
    cout << " head:\n";
    Display(head);
    cout << " ========================================\n";
    cout << " temp:\n";
    Display(temp);
    cout << " ========================================\n";
    cout << " temp2:\n";
    Display(temp2);
    cout << " ========================================\n";
    cout << " temp3:\n";
    Display(temp3);
    cout << " ========================================\n";
    cout << " temp4:\n";
    Display(temp4);
    cout << " ========================================\n";
    cout << " empty:\n";
    Display(empty);
    // deletion
    deleteDnode(empty);
    cout << " after deletion 1 (deleting head node)\n";
    cout << " ========================================\n";
    cout << " head:\n";
    Display(head);
    cout << " ========================================\n";
    cout << " temp:\n";
    cout << " !!! note that temp is now pointing to an unallocated memory (reading temp causes abnomral program termination)\n";
    cout << " so point temp to NULL\n now temp is:\n";
    temp = NULL;
    Display(temp);
    cout << " ========================================\n";
    cout << " temp2:\n";
    Display(temp2);
    cout << " ========================================\n";
    cout << " temp3:\n";
    Display(temp3);
    cout << " ========================================\n";
    cout << " temp4:\n";
    Display(temp4);
    cout << " ========================================\n";
    cout << " empty:\n";
    Display(empty);
    deleteDnode(empty, 3);
    cout << " after deletion 2 (deleting the 3th node)\n";
    cout << " ========================================\n";
    cout << " head:\n";
    Display(head);
    cout << " ========================================\n";
    cout << " temp:\n";
    Display(temp);
    cout << " ========================================\n";
    cout << " temp2:\n";
    Display(temp2);
    cout << " ========================================\n";
    cout << " temp3:\n";
    cout << " !!! note that temp3 is now pointing to an unallocated memory (reading temp3 causes abnomral program termination)\n";
    cout << " so point temp3 to NULL\n now temp3 is:\n";
    temp3 = NULL;
    Display(temp3);
    cout << " ========================================\n";
    cout << " temp4:\n";
    Display(temp4);
    cout << " ========================================\n";
    cout << " empty:\n";
    Display(empty);
    deleteDnode(empty, 1);
    cout << " after deletion 3 (deleting the 1th node)\n";
    cout << " ========================================\n";
    cout << " head:\n";
    cout << " !!! note that head is now pointing to an unallocated memory (reading head causes abnomral program termination)\n";
    cout << " so point head to NULL\n now head is:\n";
    head = NULL;
    Display(head);
    cout << " ========================================\n";
    cout << " temp:\n";
    Display(temp);
    cout << " ========================================\n";
    cout << " temp2:\n";
    Display(temp2);
    cout << " ========================================\n";
    cout << " temp3:\n";
    Display(temp3);
    cout << " ========================================\n";
    cout << " temp4:\n";
    Display(temp4);
    cout << " ========================================\n";
    cout << " empty:\n";
    Display(empty);
    deleteDnode(empty, 1);
    cout << " after deletion 4 (deleting 1th node)\n";
    cout << " ========================================\n";
    cout << " head:\n";
    Display(head);
    cout << " ========================================\n";
    cout << " temp:\n";
    Display(temp);
    cout << " ========================================\n";
    cout << " temp2:\n";
    Display(temp2);
    cout << " ========================================\n";
    cout << " temp3:\n";
    Display(temp3);
    cout << " ========================================\n";
    cout << " temp4:\n";
    cout << " !!! note that temp4 is now pointing to an unallocated memory (reading temp4 causes abnomral program termination)\n";
    cout << " so point temp4 to NULL\n now temp4 is:\n";
    temp4 = NULL;
    Display(temp4);
    cout << " ========================================\n";
    cout << " empty:\n";
    Display(empty);
    deleteDnode(empty);
    cout << " after deletion 5 (deleting the head/tail node)\n";
    cout << " ========================================\n";
    cout << " head:\n";
    Display(head);
    cout << " ========================================\n";
    cout << " temp:\n";
    Display(temp);
    cout << " ========================================\n";
    cout << " temp2:\n";
    cout << " !!! note that temp2 is now pointing to an unallocated memory (reading temp2 causes abnomral program termination)\n";
    cout << " so point temp2 to NULL\n now temp2 is:\n";
    // for some reason the function can't free the memory pointed by temp2, 
    // so one has two explicitly pass temp2 to the function.
    // when temp2 was passed, program terminates abnormally, so use delete keyword to free memory.
    Dnode* del = temp2;
    temp2 = NULL;
    delete del;
    Display(temp2);
    cout << " ========================================\n";
    cout << " temp3:\n";
    Display(temp3);
    cout << " ========================================\n";
    cout << " temp4:\n";
    Display(temp4);
    cout << " ========================================\n";
    cout << " empty:\n";
    Display(empty);
    return 0;
}